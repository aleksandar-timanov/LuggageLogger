package com.LuggageLogger.controller;

import com.LuggageLogger.config.JwtService;
import com.LuggageLogger.model.Trip;
import com.LuggageLogger.repository.TripRepository;
import com.LuggageLogger.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;

import java.time.Instant;
import java.util.Map;

@CrossOrigin(origins = "http://localhost:4200")
@Controller
@RequestMapping(path="/trips")
public class TripController {
  @Autowired // This means to get the bean called tripRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private TripRepository tripRepository;
  private final UserRepository userRepository;
  private final JwtService jwtService;

    public TripController(JwtService jwtService, UserRepository userRepository) {
        this.jwtService = jwtService;
        this.userRepository = userRepository;
    }


    @CrossOrigin
  @PostMapping(consumes={"application/json"}) // Map ONLY POST Requests
  public @ResponseBody String addNewTrip (@RequestBody Map<String, Object> trip, @RequestHeader("Authorization") String token) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
      String username = jwtService.extractUsername(token.substring(7));
      Integer userId = userRepository.findByUsername(username).get().getId();

      var tripTemp = Trip.builder()
              .userId(userId)
              .destination(trip.get("destination").toString())
                      .departureDate(Instant.parse(trip.get("departureDate").toString()))
              .returnDate(Instant.parse(trip.get("returnDate").toString()))
                      .build();


    tripRepository.save(tripTemp);
    return "Saved";
  }

  @CrossOrigin
  @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
  public ResponseEntity<String> deleteTrip(@PathVariable("id") int id) {
    tripRepository.deleteById(id);
    return new ResponseEntity<>("Trip has been deleted!", HttpStatus.OK);
  }

  @GetMapping
  public @ResponseBody Iterable<Trip> getAllTrips(@RequestHeader("Authorization") String token) {

    String username = jwtService.extractUsername(token.substring(7));
    Integer userId = userRepository.findByUsername(username).get().getId();
    return tripRepository.findByUserId(userId);
  }
}
